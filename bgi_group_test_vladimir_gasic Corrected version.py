# -*- coding: utf-8 -*-
"""BGI Group test Vladimir Gasic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lIHJxurjysDY6tOTmE6JAPc8H0X5Ha89
"""

pip install dbscan

pip install kneed

pip install umap

pip install anndata

pip install squidpy

pip install umap-learn[plot]

pip install scanpy

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from collections import defaultdict, Counter
import plotly.graph_objects as go
from sklearn.cluster import KMeans, DBSCAN, SpectralClustering
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics import silhouette_score
from sklearn.metrics import adjusted_rand_score
import gzip
import shutil
import anndata
import scanpy as sc
import kneed
from itertools import combinations
import bisect

with gzip.open('/content/drive/MyDrive/E14.5_E1S3_Dorsal_Midbrain_GEM_CellBin_merge.tsv.gz', 'rb') as f_in:
    with open('E14.5_E1S3_Dorsal_Midbrain_GEM_CellBin_merge.tsv', 'wb') as f_out:
        shutil.copyfileobj(f_in, f_out)

datainit = pd.read_csv('drive/MyDrive/E14.5_E1S3_Dorsal_Midbrain_GEM_CellBin_merge.tsv', sep='\t')

print(datainit)

df=datainit.groupby(["cell", "geneID"]).agg({"x": np.mean, "y": np.mean, "MIDCounts": np.sum})

print(df)

plt.scatter(df.x, df.y)

col=df.columns
features=col.tolist()
feature=features[1:4]
print(feature)
target_1=features[1]
target_2=features[2]

X=df.loc[:, feature].values
y_1=df.loc[:, target_1].values
y_2=df.loc[:, target_2].values

sca=StandardScaler()
X=sc.fit_transform(X)
X_df=pd.DataFrame(X, columns=feature)

pca=PCA(n_components=2)
principalComp=pca.fit_transform(X)
principaldf=pd.DataFrame(data=principalComp, columns=['PC1', 'PC2'])
principaldf.head()

pca.explained_variance_ratio_

PC1_var=pca.explained_variance_[0]
PC2_var=pca.explained_variance_[1]
print(PC1_var)
print(PC2_var)

print(pca.mean_)

v=0
l=0
for r in principaldf.PC1:
  v+= r * 1000 * np.sqrt(PC1_var)

for t in principaldf.PC2:
  l+= t * 1000 * np.sqrt(PC2_var)

v=v*2000000
l=l*2000000

# plot data
plt.scatter(df.x, df.y, alpha=0.2)
plt.arrow(x=np.mean(df.x), y=np.mean(df.y), dx=v, dy=0, width=100, facecolor="red")
plt.arrow(x=np.mean(df.x), y=np.mean(df.y), dx=0, dy=l, width=100, facecolor="green")

kmeans = KMeans (
    init="random",
    n_clusters=6,
    n_init=10,
    max_iter=300,
    random_state=42
)

kmeans.fit(X)

kmeans.cluster_centers_

kmeans_wag = {
    "init": "random",
    "n_init": 10,
    "max_iter": 300,
    "random_state": 42,
    }

sse=[]
for k in range(1,11):
  kmeans = KMeans(n_clusters=k, **kmeans_wag)
  kmeans.fit(X)
  sse.append(kmeans.inertia_)

plt.style.use("fivethirtyeight")
plt.plot(range(1, 11), sse)
plt.xticks(range(1, 11))
plt.xlabel("Number of Clusters")
plt.ylabel("SSE")
plt.show()

kl = kneed.KneeLocator(
    range(1, 11), sse, curve="convex", direction="decreasing"
)
kl.elbow

print(kmeans.labels_)

len(kmeans.labels_)

kmeans = KMeans (
    init="random",
    n_clusters=3,
    n_init=10,
    max_iter=300,
    random_state=42
)

kmeans.fit(X)

df_final=pd.DataFrame(df)
df_final['ClusterIndex']=kmeans.labels_
df_final.head()

px.scatter(df_final, x='x', y='y', color='ClusterIndex')

adata=anndata.AnnData(df)

sc.tl.pca(adata)

sc.pl.pca_scatter(adata)

df1=datainit.groupby(["cell"]).agg({"x": np.mean, "y": np.mean})

kmeans = KMeans (
    init="random",
    n_clusters=11,
    n_init=10,
    max_iter=300,
    random_state=42
)

kmeans.fit(df1[["x", "y"]])

kmeans_wag = {
    "init": "random",
    "n_init": 10,
    "max_iter": 300,
    "random_state": 42,
    }

sse=[]
for k in range(1,11):
  kmeans = KMeans(n_clusters=k, **kmeans_wag)
  kmeans.fit(df1)
  sse.append(kmeans.inertia_)

plt.style.use("fivethirtyeight")
plt.plot(range(1, 11), sse)
plt.xticks(range(1, 11))
plt.xlabel("Number of Clusters")
plt.ylabel("SSE")
plt.show()

kl = kneed.KneeLocator(
    range(1, 11), sse, curve="convex", direction="decreasing"
)
kl.elbow

kmeans = KMeans (
    init="random",
    n_clusters=3,
    n_init=10,
    max_iter=300,
    random_state=42
)

kmeans.fit(df1[["x", "y"]])

kmeans.labels_

df1["Cluster Index 1"]=kmeans.labels_

df1.head()

px.scatter(df1, x='x', y='y', color="Cluster Index 1")

df2=datainit.groupby(["cell", "geneID"]).agg({"MIDCounts": np.sum})
df2.head()

table=pd.pivot_table(df2, values="MIDCounts", index="cell", columns="geneID", fill_value=0)

print(table)

df2_final=pd.DataFrame.pivot_table(df2, values="MIDCounts", index="cell", columns="geneID", fill_value=0)

kmeans.fit(df2_final)

kmeans_wag = {
    "init": "random",
    "n_init": 10,
    "max_iter": 300,
    "random_state": 42,
    }

sse2=[]
for k in range(1,11):
  kmeans = KMeans(n_clusters=k, **kmeans_wag)
  kmeans.fit(df2_final)
  sse2.append(kmeans.inertia_)

plt.style.use("fivethirtyeight")
plt.plot(range(1, 11), sse2)
plt.xticks(range(1, 11))
plt.xlabel("Number of Clusters")
plt.ylabel("SSE")
plt.show()

kl2 = kneed.KneeLocator(
    range(1, 11), sse2, curve="convex", direction="decreasing"
)
kl2.elbow

pca_spec=PCA(n_components=2)
df1_principal = pca_spec.fit_transform(df1)
df1_principal = pd.DataFrame(df1_principal)
df1_principal.columns=["PC1", "PC2"]
df1_principal.head()

len(df1_principal)

plt.scatter(df1_principal.PC1, df1_principal.PC2)

kmeans = KMeans (
    init="random",
    n_clusters=3,
    n_init=10,
    max_iter=300,
    random_state=42
)

kmeans.fit(df2_final)

df2_final["Cluster Index 1"]=df1["Cluster Index 1"]
df2_final.head()

df2_final["Cluster Index 2"]=kmeans.labels_
df2_final.head()

df2_final_ex=df2_final

df2_final_ex["Cluster Index 1"]=df2_final_ex["Cluster Index 1"].apply(str)
df2_final_ex["Cluster Index 2"]=df2_final_ex["Cluster Index 2"].apply(str)

df2_final_ex.head()

df2_final_ex["Cluster Index 3"]=df2_final_ex["Cluster Index 1"] + ', ' + df2_final_ex["Cluster Index 2"]

df2_final_ex.head()

clu_dic={'0, 0': 0, '0, 1': 1, '0, 2': 2, '1, 0': 3, '1, 1': 4, '1, 2': 5, '2, 0': 6, '2, 1': 7, '2, 2': 8}

df2_final_ex['Cluster Index Final']=df2_final_ex['Cluster Index 3'].map(clu_dic)

df2_final_ex.head()

df2_final_ex["x"]=df1.x

df2_final_ex["y"]=df1.y

px.scatter(df2_final_ex, x="x", y="y", color="Cluster Index Final")

df2_final_ex=df2_final

df2_final_ex.head()

df2_final_ex2=df2_final

del df2_final_ex2["Cluster Index 1"]
del df2_final_ex2["Cluster Index 2"]

del df2_final_ex2["Cluster Index 3"]

del df2_final_ex2["Cluster Index Final"]

df2_final_ex2["x"]= df1.x * 0.1
df2_final_ex2["y"]= df1.y * 0.1

df2_final_ex2.head()

kmeans_ex = KMeans (
    init="random",
    n_clusters=11,
    n_init=10,
    max_iter=300,
    random_state=42
)

df2_final_ex3=df2_final_ex2

del df2_final_ex3['Cluster Index']

kmeans_ex.fit(df2_final_ex3)

kmeans_wag = {
    "init": "random",
    "n_init": 10,
    "max_iter": 300,
    "random_state": 42,
    }

sse3=[]
for k in range(1,11):
  kmeans = KMeans(n_clusters=k, **kmeans_wag)
  kmeans.fit(df2_final_ex3)
  sse3.append(kmeans.inertia_)

plt.style.use("fivethirtyeight")
plt.plot(range(1, 11), sse3)
plt.xticks(range(1, 11))
plt.xlabel("Number of Clusters")
plt.ylabel("SSE")
plt.show()

kl3 = kneed.KneeLocator(
    range(1, 11), sse3, curve="convex", direction="decreasing"
)
kl3.elbow

df2_final_ex3['Cluster Index']=kmeans_ex.labels_
df2_final_ex3.head()

px.scatter(df2_final_ex3, x='x', y='y', color='Cluster Index')

px.scatter(df2_final_ex3, x='x', y='y', color='Cluster Index')

df2_final_ex4=df2_final_ex2

del df2_final_ex4['Cluster Index']

df2_final_ex4['x']=df1.x * 0.05
df2_final_ex4['y']=df1.y * 0.05

kmeans_ex.fit(df2_final_ex4)

kmeans_wag = {
    "init": "random",
    "n_init": 10,
    "max_iter": 300,
    "random_state": 42,
    }

sse4=[]
for k in range(1,11):
  kmeans = KMeans(n_clusters=k, **kmeans_wag)
  kmeans.fit(df2_final_ex4)
  sse4.append(kmeans.inertia_)

df2_final_ex4['Cluster Index']=kmeans_ex.labels_

px.scatter(df2_final_ex4, x='x', y='y', color='Cluster Index')